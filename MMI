/* 
   Multiplicative Inverse only exists if gcd(a, m) == 1
   a * x â‰¡ 1 (mod m) 
*/

#include <bits/stdc++.h>
using namespace std;
#define ll long long

// Extended Euclidean Algorithm
vector<ll> extendedEuclid(ll a, ll b) {
    if (b == 0) {
        return {1, 0, a}; // {x, y, gcd}
    }
    vector<ll> result = extendedEuclid(b, a % b);
    ll x1 = result[0];
    ll y1 = result[1];
    ll gcd = result[2];

    ll x = y1;
    ll y = x1 - (a / b) * y1;

    return {x, y, gcd};
}

// Modular Multiplicative Inverse
ll mmi(ll a, ll m) {
    vector<ll> arr = extendedEuclid(a, m);
    ll x = arr[0];
    ll gcd = arr[2];

    if (gcd != 1) {
        return -1; // inverse does not exist
    }

    // ensure positive result
    return (x % m + m) % m;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    ll a, m;
    cin >> a >> m;

    ll ans = mmi(a, m);
    if (ans == -1) {
        cout << "Multiplicative Inverse does not exist";
    } else {
        cout << "MMI: " << ans;
    }
    return 0;
}
